# Days to Close
#
#   The expected number of days to reach a target percentage decay in premium
#   (at which point we plan to take profits & close the contract).
#

# define constants
input PROFIT_TARGET = 0.50; # [0-1], the percentage profit at which we will close

input SPREAD_CROSSING_RATIO = 0.1; # assume we can do slightly better than the bid (0=sell to bid)
input FEE_PER_CONTRACT = 0.45; # usually $0.65/contract unless you negotiate it
input PUT_MARGIN_RATIO = 1; # [0-1]; 1 = no margin (value = Max(AVAILABLE_CASH / PUT_NOTIONAL_VALUE, 1))

# all further calculations are PER SHARE
def spread = ask() - bid(); # option price spread
def strike = GetStrike();
def underlying = close(GetUnderlyingSymbol(), priceType = PriceType.LAST);

def total_premium = bid() + (SPREAD_CROSSING_RATIO * spread) - (2 * FEE_PER_CONTRACT / 100); # fee to open & close
def intrinsic_premium;
def extrinsic_premium;
def return_on_capital;

# report returns assuming the share price does not move
if (IsPut()) {
    # selling puts
    intrinsic_premium = Max(strike - underlying, 0);
    extrinsic_premium = total_premium - intrinsic_premium;
    return_on_capital = extrinsic_premium / (strike * PUT_MARGIN_RATIO);
} else {
    # buying underlying shares & selling calls
    intrinsic_premium = Max(underlying - strike, 0);
    extrinsic_premium = total_premium - intrinsic_premium;
    return_on_capital = extrinsic_premium  / underlying;
}

# approximate time for option to decay to X% of original value
# (model time decay as a linear process; not perfect, but pretty close if not near expiry)
def premium_to_burn = PROFIT_TARGET * extrinsic_premium;
def days_to_close = Max(0, AbsValue(premium_to_burn / Theta()));

AddLabel(yes, AsText(days_to_close, "%1$.1f d"));
