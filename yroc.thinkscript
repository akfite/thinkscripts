# YROC (Yearly Return On Capital)
# 
#   The expected annualized return if the option were sold and held to expiry 
#   repeatedly throughout a year.
#

# define constants
input SPREAD_CROSSING_RATIO = 0.1; # assume we can do slightly better than the bid (0=sell to bid)
input FEE_PER_CONTRACT = 0.45; # usually $0.65/contract unless you negotiate it
input PUT_MARGIN_RATIO = 1; # [0-1]; 1 = no margin (value = Max(AVAILABLE_CASH / PUT_NOTIONAL_VALUE, 1))
input TIME_EFFICIENCY = 1; # expected percent of year spent with a contract active

# not going to consider selling naked calls here

# all further calculations are PER SHARE
def bid_ = bid();
def spread = ask() - bid_; # option price spread
def strike = GetStrike();
def underlying = close(GetUnderlyingSymbol(), priceType = PriceType.LAST);

def total_premium = bid_ + (SPREAD_CROSSING_RATIO * spread) - (FEE_PER_CONTRACT / 100);
def intrinsic_premium;
def extrinsic_premium;
def return_on_capital;

# report returns assuming the share price does not move
if (IsPut()) {
    # selling puts
    intrinsic_premium = Max(strike - underlying, 0);
    extrinsic_premium = total_premium - intrinsic_premium;
    return_on_capital = Max(extrinsic_premium / (strike * PUT_MARGIN_RATIO), 0); # clamp to [0, inf]
} else {
    # buying underlying shares & selling calls
    intrinsic_premium = Max(underlying - strike, 0);
    extrinsic_premium = total_premium - intrinsic_premium;
    return_on_capital = Max(extrinsic_premium / underlying, 0); # clamp to [0, inf]
}

# annualized rate assumes compounding returns
def DAYS_PER_YEAR = 365;
def WEEKS_PER_YEAR = 52;
def active_days_per_year;
def dte = GetDaysToExpiration();
def is_weekly = dte <= 5;

if (is_weekly) {
    active_days_per_year = DAYS_PER_YEAR - (WEEKS_PER_YEAR * 2);
} else {
    active_days_per_year = 365;
}

def n_sales_per_year = time_efficiency * (active_days_per_year / dte);
def annual_roc = Power(1 + return_on_capital, n_sales_per_year) - 1;

AddLabel(yes, AsText(100 * annual_roc, "%1$.2f%%"), color.green);